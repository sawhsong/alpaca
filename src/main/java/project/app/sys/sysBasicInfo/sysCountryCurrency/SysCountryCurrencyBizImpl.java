/**************************************************************************************************
 * project
 * Description - SysCountryCurrency - Country / Currency
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sysBasicInfo.sysCountryCurrency;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.key.KeyManager;
import project.conf.resource.ormapper.dao.SysCountryCurrency.SysCountryCurrencyDao;
import project.conf.resource.ormapper.dto.oracle.SysCountryCurrency;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class SysCountryCurrencyBizImpl extends BaseBiz implements SysCountryCurrencyBiz {
	@Autowired
	private SysCountryCurrencyDao sysCountryCurrencyDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();

		try {
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(sysCountryCurrencyDao.getCountryCurrencyDataSetBySearchCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetailData(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String countryCurrencyId = requestDataSet.getValue("countryCurrencyId");

		try {
			paramEntity.setAjaxResponseDataSet(sysCountryCurrencyDao.getCountryCurrencyDataSetById(countryCurrencyId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String countryCurrencyId = requestDataSet.getValue("countryCurrencyId");
		SysCountryCurrency sysCountryCurrency = new SysCountryCurrency();
		int result = -1;

		try {
			if (CommonUtil.isBlank(countryCurrencyId)) {
				sysCountryCurrency.setCountryCurrencyId(KeyManager.getId("SYS_COUNTRY_CURRENCY_S"));
				sysCountryCurrency.setInsertUserId((String)session.getAttribute("UserId"));
				sysCountryCurrency.setInsertDate(CommonUtil.getSysdateAsDate());
			} else {
				sysCountryCurrency = sysCountryCurrencyDao.getCountryCurrencyById(countryCurrencyId);

				sysCountryCurrency.setUpdateUserId((String)session.getAttribute("UserId"));
				sysCountryCurrency.setUpdateDate(CommonUtil.getSysdateAsDate());
			}

			sysCountryCurrency.setCurrencyName(requestDataSet.getValue("currencyName"));
			sysCountryCurrency.setCurrencySymbol(requestDataSet.getValue("currencySymbol"));
			sysCountryCurrency.setCurrencyAlphabeticCode(CommonUtil.upperCase(requestDataSet.getValue("currencyAlphabeticCode")));
			sysCountryCurrency.setCurrencyNumericCode(requestDataSet.getValue("currencyNumericCode"));
			sysCountryCurrency.setCountryName(requestDataSet.getValue("countryName"));
			sysCountryCurrency.setCountryLanguageCode(requestDataSet.getValue("countryLanguageCode"));
			sysCountryCurrency.setCountryCode2(CommonUtil.upperCase(requestDataSet.getValue("countryCode2")));
			sysCountryCurrency.setCountryCode3(CommonUtil.upperCase(requestDataSet.getValue("countryCode3")));
			sysCountryCurrency.setCountryNumericCode(requestDataSet.getValue("countryNumericCode"));

			result = sysCountryCurrencyDao.save(countryCurrencyId, sysCountryCurrency);

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String countryCurrencyId = requestDataSet.getValue("countryCurrencyId");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String countryCurrencyIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = -1;

		try {
			if (CommonUtil.isBlank(countryCurrencyId)) {
				result = sysCountryCurrencyDao.delete(countryCurrencyIds);
			} else {
				result = sysCountryCurrencyDao.delete(countryCurrencyId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			String pageTitle = "Country Currency Code List";
			String fileName = "CountryCurrencyCodeList";
			String[] columnHeader = {"currency_name", "currency_alphabetic_code", "currency_symbol", "country_name", "country_code_3"};

			exportHelper = ExportUtil.getExportHelper(requestDataSet.getValue("fileType"));
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(sysCountryCurrencyDao.getCountryCurrencyDataSetBySearchCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}