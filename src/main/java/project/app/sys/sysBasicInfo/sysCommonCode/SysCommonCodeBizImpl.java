/**************************************************************************************************
 * project
 * Description - SysCommonCode - Common Code
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sysBasicInfo.sysCommonCode;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.commoncode.CommonCodeManager;
import project.conf.resource.ormapper.dao.SysCommonCode.SysCommonCodeDao;
import project.conf.resource.ormapper.dto.oracle.SysCommonCode;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class SysCommonCodeBizImpl extends BaseBiz implements SysCommonCodeBiz {
	@Autowired
	private SysCommonCodeDao sysCommonCodeDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String codeType = requestDataSet.getValue("commonCodeType");

		try {
			queryAdvisor.setPagination(true);
			queryAdvisor.addAutoFillCriteria(codeType, "code_type = '"+codeType+"'");

			paramEntity.setAjaxResponseDataSet(sysCommonCodeDao.getActiveCommonCodeDataSet(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity getMasterData(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();

		try {
			paramEntity.setAjaxResponseDataSet(sysCommonCodeDao.getCommonCodeDataSetByCodeType(requestDataSet.getValue("codeType")));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity getDetailData(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();

		try {
			paramEntity.setAjaxResponseDataSet(sysCommonCodeDao.getCommonCodeDataSetByCodeType(requestDataSet.getValue("codeType")));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		SysCommonCode sysCommonCode = new SysCommonCode();
		HttpSession session = paramEntity.getSession();
		String delimiter = ConfigUtil.getProperty("delimiter.data");
		String codeType = CommonUtil.upperCase(requestDataSet.getValue("codeTypeMaster"));
		int detailLength = CommonUtil.toInt(requestDataSet.getValue("detailLength"));
		DataSet detailDataSet;
		int result = -1, masterDataRow = -1;

		try {
			detailDataSet = sysCommonCodeDao.getCommonCodeDataSetByCodeType(codeType);

			if (detailDataSet.getRowCnt() <= 0) {
				sysCommonCode.setIsDefault(CommonCodeManager.getCodeByConstants("SIMPLE_YN_N"));
				sysCommonCode.setInsertUserId((String)session.getAttribute("UserId"));
				sysCommonCode.setInsertDate(CommonUtil.toDate(CommonUtil.getSysdate()));
			} else {
				masterDataRow = detailDataSet.getRowIndex("COMMON_CODE", "0000000000");

				result = sysCommonCodeDao.delete(codeType);
				if (result <= 0) {
					throw new FrameworkException("E801", getMessage("E801", paramEntity));
				}

				sysCommonCode.setIsDefault(detailDataSet.getValue(masterDataRow, "IS_DEFAULT"));
				sysCommonCode.setInsertUserId(detailDataSet.getValue(masterDataRow, "INSERT_USER_ID"));
				sysCommonCode.setInsertDate(CommonUtil.toDate(detailDataSet.getValue(masterDataRow, "INSERT_DATE")));
				sysCommonCode.setUpdateUserId((String)session.getAttribute("UserId"));
				sysCommonCode.setUpdateDate(CommonUtil.toDate(CommonUtil.getSysdate()));
			}

			sysCommonCode.setCodeType(codeType);
			sysCommonCode.setCommonCode("0000000000");
			sysCommonCode.setCodeMeaning(requestDataSet.getValue("codeMeaningMaster"));
			sysCommonCode.setDescriptionEn(requestDataSet.getValue("descriptionMaster"));
			sysCommonCode.setDescriptionKo(requestDataSet.getValue("descriptionMaster"));
			sysCommonCode.setProgramConstants(codeType + "_0000000000");
			sysCommonCode.setSortOrder("000");
			sysCommonCode.setIsActive(CommonUtil.nvl(requestDataSet.getValue("isActiveMaster"), "N"));

			result = sysCommonCodeDao.insert(sysCommonCode);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			result = 0;
			for (int i=0; i<detailLength; i++) {
				String commonCode = requestDataSet.getValue("commonCodeDetail" + delimiter + i);

				sysCommonCode.setCommonCode(commonCode);
				sysCommonCode.setCodeMeaning(requestDataSet.getValue("codeMeaningDetail" + delimiter + i));
				sysCommonCode.setDescriptionEn(requestDataSet.getValue("descriptionDetail" + delimiter + i));
				sysCommonCode.setDescriptionKo(requestDataSet.getValue("descriptionDetail" + delimiter + i));
				sysCommonCode.setProgramConstants(codeType + "_" + CommonUtil.upperCase(commonCode));
				sysCommonCode.setSortOrder(requestDataSet.getValue("sortOrderDetail" + delimiter + i));
				sysCommonCode.setIsActive(CommonUtil.nvl(requestDataSet.getValue("isActiveDetail" + delimiter + i), "N"));
				sysCommonCode.setIsDefault(detailDataSet.getValue(masterDataRow, "IS_DEFAULT"));

				result += sysCommonCodeDao.insert(sysCommonCode);
			}

			if (result != detailLength) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String codeType = requestDataSet.getValue("codeType");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String[] codeTypes = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = -1;

		try {
			if (CommonUtil.isBlank(codeType)) {
				result = sysCommonCodeDao.delete(codeTypes);
			} else {
				result = sysCommonCodeDao.delete(codeType);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}

	public ParamEntity doExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String dataRange = requestDataSet.getValue("dataRange");
		String codeType = requestDataSet.getValue("commonCodeType");

		try {
			String pageTitle = "Common Code List";
			String fileName = "CommonCodeList";
			String[] columnHeader = {"code_type", "common_code", "code_meaning", "program_constants", "description_en", "description_ko", "sort_order", "is_active", "is_default"};
			String[] fileHeader = {"CODE TYPE", "COMMON CODE", "CODE MEANING", "PROGRAM CONSTANTS", "DESCRIPTION(EN)", "DESCRIPTION(KO)", "SORT ORDER", "IS ACTIVE", "IS DEFAULT"};

			exportHelper = ExportUtil.getExportHelper(requestDataSet.getValue("fileType"));
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.addAutoFillCriteria(codeType, "code_type = '"+codeType+"'");
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(sysCommonCodeDao.getActiveCommonCodeDataSet(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}

		return paramEntity;
	}
}