/**************************************************************************************************
 * project
 * Description - SysMenu - Menu
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sysAdmin.sysMenu;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.SysMenu.SysMenuDao;
import project.conf.resource.ormapper.dto.oracle.SysMenu;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.BeanHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class SysMenuBizImpl extends BaseBiz implements SysMenuBiz {
	@Autowired
	private SysMenuDao sysMenuDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		DataSet menuDataSet;
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();

		try {
			queryAdvisor.setRequestDataSet(requestDataSet);
			queryAdvisor.setPagination(false);

			menuDataSet = sysMenuDao.getMenuDataSetBySearchCriteria(queryAdvisor);
			menuDataSet.addColumn("DELETABLE", "true");
			for (int i=0; i<menuDataSet.getRowCnt(); i++) {
				String menuId = menuDataSet.getValue(i, "MENU_ID");
				String parentMenuId = menuDataSet.getValue(i, "PARENT_MENU_ID");
				String root = menuDataSet.getValue(i, "ROOT");
				boolean hasAction = BeanHelper.containsBean(CommonUtil.toCamelCaseStartLowerCase(menuId) + "Action") || BeanHelper.containsBean(CommonUtil.toStartLowerCase(menuId) + "Action");

				if (hasAction) {
					for (int j=0; j<menuDataSet.getRowCnt(); j++) {
						String thisMenuId = menuDataSet.getValue(j, "MENU_ID");
						if ((CommonUtil.equals(thisMenuId, menuId)) || (CommonUtil.equals(thisMenuId, parentMenuId)) || (CommonUtil.equals(thisMenuId, root))) {
							menuDataSet.setValue(j, "DELETABLE", "false");
						}
					}
				}
			}

			paramEntity.setAjaxResponseDataSet(menuDataSet);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEdit(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetailData(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String menuId = requestDataSet.getValue("menuId");

		try {
			paramEntity.setAjaxResponseDataSet(sysMenuDao.getMenuDataSetById(menuId));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdateSortOrder(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String selectedMenuId = requestDataSet.getValue("selectedMenuId");
		String menuId = requestDataSet.getValue("menuId");
		String menuLevel = requestDataSet.getValue("menuLevel");
		String level1MenuId = requestDataSet.getValue("level1");
		String level2MenuId = requestDataSet.getValue("level2");
		int result = -1;
		SysMenu sysMenu = new SysMenu();

		try {
			if (CommonUtil.equalsIgnoreCase(menuLevel, "1")) {
				menuId = CommonUtil.upperCase(menuId);
			}

			sysMenu = sysMenuDao.getMenuById(menuId);

			if (CommonUtil.isBlank(selectedMenuId)) {
				if (CommonUtil.isNotBlank(sysMenu.getMenuId())) {
					throw new FrameworkException("E910", getMessage("E910", paramEntity));
				}

				if (CommonUtil.equalsIgnoreCase(menuLevel, "1")) {
					sysMenu.setMenuId(CommonUtil.upperCase(requestDataSet.getValue("menuId")));
					sysMenu.setParentMenuId(null);
					sysMenu.setMenuIcon(CommonUtil.upperCase(requestDataSet.getValue("menuId")));
				} else if (CommonUtil.equalsIgnoreCase(menuLevel, "2")) {
					sysMenu.setMenuId(requestDataSet.getValue("menuId"));
					sysMenu.setParentMenuId(CommonUtil.upperCase(level1MenuId));
					sysMenu.setMenuIcon(requestDataSet.getValue("menuId"));
				} else if (CommonUtil.equalsIgnoreCase(menuLevel, "3")) {
					sysMenu.setMenuId(requestDataSet.getValue("menuId"));
					sysMenu.setParentMenuId(level2MenuId);
					sysMenu.setMenuIcon(null);
				}

				sysMenu.setInsertUserId((String)session.getAttribute("UserId"));
				sysMenu.setInsertDate(CommonUtil.getSysdateAsDate());
			} else {
				sysMenu.setUpdateUserId((String)session.getAttribute("UserId"));
				sysMenu.setUpdateDate(CommonUtil.getSysdateAsDate());
			}

			sysMenu.setMenuUrl(requestDataSet.getValue("menuUrl"));
			sysMenu.setMenuNameEn(requestDataSet.getValue("menuName"));
			sysMenu.setMenuNameKo(requestDataSet.getValue("menuName"));
			sysMenu.setSortOrder(requestDataSet.getValue("sortOrder"));
			sysMenu.setDescription(requestDataSet.getValue("description"));
			sysMenu.setIsActive(requestDataSet.getValue("isActive"));

			if (CommonUtil.isBlank(selectedMenuId)) {
				result = sysMenuDao.insert(sysMenu);
			} else {
				result = sysMenuDao.update(menuId, sysMenu);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doDelete(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String menuId = requestDataSet.getValue("menuId");
		String chkForDel = requestDataSet.getValue("chkForDel");
		String menuIds[] = CommonUtil.splitWithTrim(chkForDel, ConfigUtil.getProperty("delimiter.record"));
		int result = -1;

		try {
			if (CommonUtil.isBlank(menuId)) {
				result = sysMenuDao.delete(menuIds);
			} else {
				result = sysMenuDao.delete(menuId);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpdateSortOrder(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String delimiter = ConfigUtil.getProperty("delimiter.data");
		int dataLength = CommonUtil.toInt(requestDataSet.getValue("dataLength"));
		int result = 0;

		try {
			for (int i=0; i<dataLength; i++) {
				SysMenu sysMenu = new SysMenu();
				String menuId = requestDataSet.getValue("menuId"+delimiter+i);

				queryAdvisor.resetAll();

				sysMenu.addUpdateColumn("sort_order", requestDataSet.getValue("sortOrder" + delimiter + i));
				sysMenu.addUpdateColumn("update_user_id", (String)session.getAttribute("UserId"));
				sysMenu.addUpdateColumn("update_date", CommonUtil.getSysdate(), "date");

				result += sysMenuDao.updateSortOrder(menuId, sysMenu);
			}

			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doExport(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		ExportHelper exportHelper;
		String dataRange = requestDataSet.getValue("dataRange");

		try {
			String pageTitle = "Menu List";
			String fileName = "MenuList";

			exportHelper = ExportUtil.getExportHelper(requestDataSet.getValue("fileType"));
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);

			queryAdvisor.setRequestDataSet(requestDataSet);
			if (CommonUtil.containsIgnoreCase(dataRange, "all"))
				queryAdvisor.setPagination(false);
			else {
				queryAdvisor.setPagination(true);
			}

			exportHelper.setSourceDataSet(sysMenuDao.getMenuDataSetBySearchCriteria(queryAdvisor));

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}