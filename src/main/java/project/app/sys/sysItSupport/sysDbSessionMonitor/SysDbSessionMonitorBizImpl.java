/**************************************************************************************************
 * project
 * Description - SysDbSessionMonitor - Databse Session Monitor
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sysItSupport.sysDbSessionMonitor;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.conf.resource.ormapper.dao.ProjectDummy.ProjectDummyDao;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;

public class SysDbSessionMonitorBizImpl extends BaseBiz implements SysDbSessionMonitorBiz {
	@Autowired
	private ProjectDummyDao dummyDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doSearch(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String dataSource = requestDataSet.getValue("dataSource");

		try {
			dummyDao.setDataSourceName(dataSource);

			paramEntity.setAjaxResponseDataSet(dummyDao.getDatabaseSessionList(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getSql(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getSqlText(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String dataSource = requestDataSet.getValue("dataSource");
		String sqlId = requestDataSet.getValue("sqlId");

		try {
			dummyDao.setDataSourceName(dataSource);

			paramEntity.setAjaxResponseDataSet(dummyDao.getSqlTextBySqlId(sqlId));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeKillSessions(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		String dataSource = requestDataSet.getValue("dataSource");
		String chkToKill = requestDataSet.getValue("chkToKill");
		String ids[] = CommonUtil.splitWithTrim(chkToKill, ConfigUtil.getProperty("delimiter.record"));

		try {
			dummyDao.setDataSourceName(dataSource);

			dummyDao.killSessions(ids);

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}