/**************************************************************************************************
 * project
 * Description - SysItSupportInvoice - Invoice
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sysItSupport.sysItSupportInvoice;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.bizservice.invoice.InvoiceBizService;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class SysItSupportInvoiceBizImpl extends BaseBiz implements SysItSupportInvoiceBiz {
	@Autowired
	private InvoiceBizService invoiceBS;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		String dateFormat = ConfigUtil.getProperty("format.date.java");
		String defaultDateFrom = "", defaultDateTo = "";

		try {
			defaultDateFrom = CommonUtil.getCalcDate("M", CommonUtil.getSysdate(dateFormat), dateFormat, -3);
			defaultDateTo = CommonUtil.getSysdate(dateFormat);

			paramEntity.setObject("defaultDateFrom", defaultDateFrom);
			paramEntity.setObject("defaultDateTo", defaultDateTo);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String invoiceId = dsReq.getValue("invoiceId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		String dateFormat = ConfigUtil.getProperty("format.date.java");

		try {
			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", dateFormat);
			qa.addAutoFillCriteria(invoiceId, "inv.invoice_id "+CommonUtil.getSearchCriteriaWhereClauseString(invoiceId));
			qa.addAutoFillCriteria(dsReq.getValue("dateFrom"), "trunc(inv.invoice_date) >= to_date('"+dsReq.getValue("dateFrom")+"', '"+dateFormat+"')");
			qa.addAutoFillCriteria(dsReq.getValue("dateTo"), "trunc(inv.invoice_date) <= to_date('"+dsReq.getValue("dateTo")+"', '"+dateFormat+"')");
			qa.addAutoFillCriteria(dsReq.getValue("billingOrgId"), "inv.pay_to_organisation_id = '"+dsReq.getValue("billingOrgId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("personId"), "inv.person_id = '"+dsReq.getValue("personId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("status"), "inv.status = '"+dsReq.getValue("status")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("genType"), "inv.inv_cr_status = '"+dsReq.getValue("genType")+"'");
			qa.addOrderByClause("inv.invoice_id desc");
			qa.setPagination(true);

			paramEntity.setAjaxResponseDataSet(invoiceBS.getInvoiceList(qa));
			paramEntity.setTotalResultRows(qa.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetail(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdateInvoiceStatus(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		String ids = "";
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			for (String id : assignmentIds) {
				ids += CommonUtil.isBlank(ids) ? "'"+id+"'" : ",'"+id+"'";
			}

			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(ids, "inv.invoice_id in ("+ids+")");
			qa.addOrderByClause("inv.invoice_id desc");

			paramEntity.setObject("invoice", invoiceBS.getInvoiceList(qa));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdateInvoiceSubTotal(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			qa.setObject("dataSource", dataSource);

			paramEntity.setObject("invoice", invoiceBS.getInvoiceByInvoiceId(qa, dsReq.getValue("invoiceId")));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpdateInvoiceStatus(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		String statusTo = dsReq.getValue("statusTo");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		int result = 0;

		try {
			qa.setObject("dataSource", dataSource);

			result = invoiceBS.updateStatus(qa, assignmentIds, statusTo);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpdateInvoiceSubTotal(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String invoiceId = dsReq.getValue("invoiceId");
		String gstAmountTo = dsReq.getValue("gstAmountTo");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		int result = 0;

		try {
			qa.setObject("dataSource", dataSource);

			result = invoiceBS.updateInvoiceSubTotal(qa, invoiceId, gstAmountTo);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doCalculateAmount(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		double gstAmountTo = CommonUtil.toDouble(dsReq.getValue("gstAmountTo"));
		double invoiceAmount = CommonUtil.toDouble(dsReq.getValue("invoiceAmount"));
		double total = 0;
		DataSet result = new DataSet();

		try {
			total = invoiceAmount - gstAmountTo;

			result.addColumn("total", CommonUtil.toString(total, "#,##0.#####"));

			paramEntity.setAjaxResponseDataSet(result);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		DataSet dsResult = new DataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		ExportHelper exportHelper;
		String columnHeader[], fileHeader[];
		String invoiceId = dsReq.getValue("invoiceId");
		String pageTitle, fileName;
		String fileType = dsReq.getValue("fileType");
		String dataRange = dsReq.getValue("dataRange");
		String dateFormat = ConfigUtil.getProperty("format.date.java");

		try {
			pageTitle = "Invoice List";
			fileName = "InvoiceList";
			columnHeader = new String[]{"INVOICE_ID", "INVOICE_NUMBER", "PARENT_INVOICE_ID", "CNT_GROUPING", "INVOICE_DATE", "INVOICE_AMOUNT", "GST_AMOUNT",
					"INVOICE_TYPE", "STATUS_MEANING", "PAY_TO_ORG_ID", "PAY_TO_ORG_NAME", "PERSON_NUMBER", "PERSON_NAME", "CON_PERIOD_START_DATE", "CON_PERIOD_END_DATE",
					"GENERATION_TYPE_MEANING", "CREATION_DATE", "CREATED_BY", "LAST_UPDATE_DATE", "LAST_UPDATED_BY", "SOURCE", "SOURCE_ID"};
			fileHeader = new String[]{"Invoice Id", "Invoice Number", "Group Invoice Id", "Grouping Count", "Invoice Date", "Invoice Amount", "GST Amount",
					"Invoice Type", "Status", "Pay To Org Id", "Pay To Org Name", "Person Numnber", "Person Name", "Period Start", "Period End",
					"Generation Type", "Created Date", "Created By", "Updated Date", "Updated By", "Source", "Source Id"};

			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", dateFormat);
			qa.addAutoFillCriteria(invoiceId, "inv.invoice_id "+CommonUtil.getSearchCriteriaWhereClauseString(invoiceId));
			qa.addAutoFillCriteria(dsReq.getValue("dateFrom"), "trunc(inv.invoice_date) >= to_date('"+dsReq.getValue("dateFrom")+"', '"+dateFormat+"')");
			qa.addAutoFillCriteria(dsReq.getValue("dateTo"), "trunc(inv.invoice_date) <= to_date('"+dsReq.getValue("dateTo")+"', '"+dateFormat+"')");
			qa.addAutoFillCriteria(dsReq.getValue("billingOrgId"), "hbc.billing_organization_id = '"+dsReq.getValue("billingOrgId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("personId"), "inv.person_id = '"+dsReq.getValue("personId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("status"), "inv.status = '"+dsReq.getValue("status")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("genType"), "inv.inv_cr_status = '"+dsReq.getValue("genType")+"'");
			qa.addOrderByClause("inv.invoice_id desc");

			if (CommonUtil.containsIgnoreCase(dataRange, "all")) {
				qa.setPagination(false);
			} else {
				qa.setPagination(true);
			}

			dsResult = invoiceBS.getInvoiceList(qa);

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);
			exportHelper.setSourceDataSet(dsResult);

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}