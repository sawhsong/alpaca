/**************************************************************************************************
 * project
 * Description - SysItSupportAssignment - Assignment
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.sys.sysItSupport.sysItSupportAssignment;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.bizservice.assignment.AssignmentBizService;
import project.conf.resource.ormapper.dao.PrtAssignmentSetup.PrtAssignmentSetupDao;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.export.ExportHelper;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;
import zebra.util.ExportUtil;

public class SysItSupportAssignmentBizImpl extends BaseBiz implements SysItSupportAssignmentBiz {
	@Autowired
	private AssignmentBizService assignmentBS;
	@Autowired
	private PrtAssignmentSetupDao prtAssignmentSetupDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String asgId = dsReq.getValue("asgId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(asgId, "assignment_id "+CommonUtil.getSearchCriteriaWhereClauseString(asgId));
			qa.addAutoFillCriteria(dsReq.getValue("personId"), "person_id = '"+dsReq.getValue("personId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("billingCodeId"), "billing_code_id = '"+dsReq.getValue("billingCodeId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("billingOrgId"), "billing_organisation_id = '"+dsReq.getValue("billingOrgId")+"'");
			qa.addOrderByClause("person_name, assignment_id desc");
			qa.setPagination(true);

			paramEntity.setAjaxResponseDataSet(assignmentBS.getAssignmentList(qa));
			paramEntity.setTotalResultRows(qa.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDetail(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUnlockPrt(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));

			prtAssignmentSetupDao.setDataSourceName(dataSource);
			paramEntity.setObject("prtSetup", prtAssignmentSetupDao.getByAssignmentIdsForUnlockPrt(assignmentIds));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdateWorkingState(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		String ids = "";
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			for (String id : assignmentIds) {
				ids += CommonUtil.isBlank(ids) ? "'"+id+"'" : ",'"+id+"'";
			}

			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(ids, "assignment_id in ("+ids+")");
			qa.addOrderByClause("person_name, assignment_id desc");

			paramEntity.setObject("assignmentDataSet", assignmentBS.getAssignmentList(qa));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getUpdateEndUser(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		String ids = "";
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			for (String id : assignmentIds) {
				ids += CommonUtil.isBlank(ids) ? "'"+id+"'" : ",'"+id+"'";
			}

			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(ids, "assignment_id in ("+ids+")");
			qa.addOrderByClause("person_name, assignment_id desc");

			paramEntity.setObject("assignmentDataSet", assignmentBS.getAssignmentList(qa));
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUnlockPrt(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		int result = 0;

		try {
			prtAssignmentSetupDao.setDataSourceName(dataSource);
			result = prtAssignmentSetupDao.deleteByAssignmentIds(assignmentIds);
			if (result < 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpdateWorkingState(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		String workingStateTo = dsReq.getValue("workingStateTo");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		int result = 0;

		try {
			qa.setObject("dataSource", dataSource);

			result = assignmentBS.updateWorkingState(qa, assignmentIds, workingStateTo);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity doUpdateEndUser(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String chkForAction = dsReq.getValue("chkForAction");
		String assignmentIds[] = CommonUtil.splitWithTrim(chkForAction, ConfigUtil.getProperty("delimiter.record"));
		String endUserToId = dsReq.getValue("endUserToId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		int result = 0;

		try {
			qa.setObject("dataSource", dataSource);

			result = assignmentBS.updateEndUser(qa, assignmentIds, endUserToId);
			if (result <= 0) {
				throw new FrameworkException("E801", getMessage("E801", paramEntity));
			}

			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeExport(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		DataSet dsResult = new DataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		ExportHelper exportHelper;
		String asgId = dsReq.getValue("asgId");
		String columnHeader[], fileHeader[];
		String pageTitle, fileName;
		String fileType = dsReq.getValue("fileType");
		String dataRange = dsReq.getValue("dataRange");

		try {
			pageTitle = "Assignment List";
			fileName = "AssignmentList";
			columnHeader = new String[]{"ASSIGNMENT_ID", "ASSIGNMENT_NUMBER", "PERSON_ID", "PERSON_NUMBER", "PERSON_NAME", "BILLING_ORGANISATION_ID", "BILLING_ORGANISATION_NAME",
					"EU_ORGANISATION_ID", "EU_ORGANISATION_NAME", "ASG_ACTIVE", "ASSIGNMENT_START_DATE", "ASSIGNMENT_END_DATE", "BILLING_CODE", "BILLING_CODE_ID", "PAY_METHOD_ID", "PAYMENT_METHOD",
					"PREFERRED", "HAS_WC", "HAS_PRT", "WORKING_STATE", "LAST_INVOICE_DATE", "LAST_PAID_DATE"};
			fileHeader = new String[]{"Assignment Id", "Assignment Number", "Person Id", "Person Number", "Person Name", "Billing Org Id", "Billing Org Name",
					"EU Org Id", "EU Org Name", "Is Active", "Assignment Start Date", "Assignment End Date", "Billing Code", "Billing Code Id", "Pay Method Id", "Pay Method",
					"Is Preferred", "Has Workcover", "Has PRT", "Working State", "Last Invoice Date", "Last Paid Date"};

			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(asgId, "assignment_id "+CommonUtil.getSearchCriteriaWhereClauseString(asgId));
			qa.addAutoFillCriteria(dsReq.getValue("personId"), "person_id = '"+dsReq.getValue("personId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("billingCodeId"), "billing_code_id = '"+dsReq.getValue("billingCodeId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("billingOrgId"), "billing_organisation_id = '"+dsReq.getValue("billingOrgId")+"'");
			qa.addOrderByClause("person_name, assignment_id desc");

			if (CommonUtil.containsIgnoreCase(dataRange, "all")) {
				qa.setPagination(false);
			} else {
				qa.setPagination(true);
			}

			dsResult = assignmentBS.getAssignmentList(qa);

			exportHelper = ExportUtil.getExportHelper(fileType);
			exportHelper.setPageTitle(pageTitle);
			exportHelper.setColumnHeader(columnHeader);
			exportHelper.setFileHeader(fileHeader);
			exportHelper.setFileName(fileName);
			exportHelper.setPdfWidth(1000);
			exportHelper.setSourceDataSet(dsResult);

			paramEntity.setSuccess(true);
			paramEntity.setFileToExport(exportHelper.createFile());
			paramEntity.setFileNameToExport(exportHelper.getFileName());
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}