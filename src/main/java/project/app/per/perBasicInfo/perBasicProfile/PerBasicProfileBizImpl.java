/**************************************************************************************************
 * project
 * Description - PerBasicProfile - Person Profile (Old Type)
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.per.perBasicInfo.perBasicProfile;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.bizservice.assignment.AssignmentBizService;
import project.common.module.bizservice.payment.PaymentBizService;
import project.common.module.bizservice.workcover.WorkcoverBizService;
import project.conf.resource.ormapper.dao.DocumentProfile.DocumentProfileDao;
import project.conf.resource.ormapper.dao.HpAdditionalServices.HpAdditionalServicesDao;
import project.conf.resource.ormapper.dao.HpAddressContactD.HpAddressContactDDao;
import project.conf.resource.ormapper.dao.HpComments.HpCommentsDao;
import project.conf.resource.ormapper.dao.HpContactHistory.HpContactHistoryDao;
import project.conf.resource.ormapper.dao.HpNextActions.HpNextActionsDao;
import project.conf.resource.ormapper.dao.HpOrganisationD.HpOrganisationDDao;
import project.conf.resource.ormapper.dao.HpPersonD.HpPersonDDao;
import project.conf.resource.ormapper.dao.HrDocument.HrDocumentDao;
import project.conf.resource.ormapper.dao.Opportunity.OpportunityDao;
import project.conf.resource.ormapper.dao.OpportunityAssignmentDetails.OpportunityAssignmentDetailsDao;
import project.conf.resource.ormapper.dao.ScheduledPayrollNotes.ScheduledPayrollNotesDao;
import project.conf.resource.ormapper.dao.WorkingRightsStatus.WorkingRightsStatusDao;
import project.conf.resource.ormapper.dto.oracle.HpAddressContactD;
import project.conf.resource.ormapper.dto.oracle.HpComments;
import project.conf.resource.ormapper.dto.oracle.HpOrganisationD;
import project.conf.resource.ormapper.dto.oracle.HpPersonD;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;

public class PerBasicProfileBizImpl extends BaseBiz implements PerBasicProfileBiz {
	@Autowired
	private HpPersonDDao hpPersonDDao;
	@Autowired
	private HpOrganisationDDao hpOrganisationDDao;
	@Autowired
	private HpCommentsDao hpCommentsDao;
	@Autowired
	private HpContactHistoryDao hpContactHistoryDao;
	@Autowired
	private HpAddressContactDDao hpAddressContactDDao;
	@Autowired
	private HrDocumentDao hrDocumentDao;
	@Autowired
	private DocumentProfileDao documentProfileDao;
	@Autowired
	private HpAdditionalServicesDao hpAdditionalServicesDao;
	@Autowired
	private HpNextActionsDao hpNextActionsDao;
	@Autowired
	private WorkingRightsStatusDao workingRightsStatusDao;
	@Autowired
	private ScheduledPayrollNotesDao scheduledPayrollNotesDao;
	@Autowired
	private OpportunityDao opportunityDao;
	@Autowired
	private OpportunityAssignmentDetailsDao oppAsgDetailsDao;
	@Autowired
	private WorkcoverBizService wcBS;
	@Autowired
	private AssignmentBizService assignmentBS;
	@Autowired
	private PaymentBizService paymentBS;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);

			queryAdvisor.setRequestDataSet(dsRequest);
			queryAdvisor.setPagination(true);

			paramEntity.setAjaxResponseDataSet(hpPersonDDao.getPersonDataSetByCriteria(queryAdvisor));
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPersonFrameContainer(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		HpPersonD hpPersonD;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);

			hpPersonD = hpPersonDDao.getPersonByPersonId(personId);

			paramEntity.setObject("hpPersonD", hpPersonD);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPersonal(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		HpPersonD hpPersonD;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);
			hpPersonD = hpPersonDDao.getPersonByPersonId(personId);

			paramEntity.setObject("hpPersonD", hpPersonD);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPersonDetail(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		HpPersonD hpPersonD, referral;
		HpOrganisationD hpOrganisationD, referralOrg;
		DataSet personDataSet;
		String dateFormatFrom = ConfigUtil.getProperty("format.default.dateTime"), dateFormatTo = ConfigUtil.getProperty("format.date.java");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);
			hpOrganisationDDao.setDataSourceName(dataSource);

			hpPersonD = hpPersonDDao.getPersonByPersonId(personId);
			referral = hpPersonDDao.getPersonByPersonId(CommonUtil.toString(hpPersonD.getReferralId()));
			hpOrganisationD = hpOrganisationDDao.getOrganisationByOrganisationId(CommonUtil.toString(hpPersonD.getEmploymentCompanyOrgId()));
			referralOrg = hpOrganisationDDao.getOrganisationByOrganisationId(CommonUtil.toString(hpPersonD.getReferralOrganisationId()));

			personDataSet = hpPersonD.getDataSet();
			personDataSet.setValue("DATE_OF_BIRTH", CommonUtil.changeDateFormat(personDataSet.getValue("DATE_OF_BIRTH"), dateFormatFrom, dateFormatTo));
			personDataSet.setValue("FIRST_CONTACT", CommonUtil.changeDateFormat(personDataSet.getValue("FIRST_CONTACT"), dateFormatFrom, dateFormatTo));
			personDataSet.addColumn("EMPLOYMENT_COMPANY_ORG_NAME", CommonUtil.nvl(hpOrganisationD.getOrganisationName())+" ("+CommonUtil.nvl(CommonUtil.toString(hpOrganisationD.getOrganisationId()))+")");
			personDataSet.addColumn("REFERRAL_NAME", CommonUtil.isBlank(referral.getFullName()) ? "" : CommonUtil.nvl(referral.getFullName())+" ("+CommonUtil.nvl(referral.getPersonNumber())+")");
			personDataSet.addColumn("REFERRAL_ORGANISATION_NAME", CommonUtil.isBlank(referralOrg.getOrganisationName()) ? "" : CommonUtil.nvl(referralOrg.getOrganisationName())+" ("+CommonUtil.nvl(CommonUtil.toString(referralOrg.getOrganisationId()))+")");

			paramEntity.setAjaxResponseDataSet(personDataSet);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPersonalComment(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		HpPersonD hpPersonD;
		HpComments hpComments;
		DataSet commentDataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);
			hpCommentsDao.setDataSourceName(dataSource);

			hpPersonD = hpPersonDDao.getPersonByPersonId(personId);
			hpComments = hpCommentsDao.getCommentsByCommentId(CommonUtil.toString(hpPersonD.getPersonalCommentId()));

			commentDataSet = hpComments.getDataSet();

			paramEntity.setAjaxResponseDataSet(commentDataSet);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getCommsHistory(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		DataSet commsHistoryDataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpContactHistoryDao.setDataSourceName(dataSource);

			commsHistoryDataSet = hpContactHistoryDao.getContactHistoryForPersonalInfoByPersonId(personId);

			paramEntity.setAjaxResponseDataSet(commsHistoryDataSet);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getContact(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		HpPersonD hpPersonD;
		HpAddressContactD hpAddressContactD;

		try {
			hpPersonDDao.setDataSourceName(dataSource);
			hpAddressContactDDao.setDataSourceName(dataSource);

			hpPersonD = hpPersonDDao.getPersonByPersonId(personId);
			hpAddressContactD = hpAddressContactDDao.getAddressContactByPersonId(personId);

			paramEntity.setObject("hpPersonD", hpPersonD);
			paramEntity.setObject("hpAddressContactD", hpAddressContactD);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDocumentOutstanding(ParamEntity paramEntity) throws Exception {
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		String profileHtmlString = "";

		try {
			documentProfileDao.setDataSourceName(dataSource);

			profileHtmlString = documentProfileDao.getProfileHtmlStringForSelectbox("id:documentProfile;name:documentProfile;class:bootstrapSelect hor;data-width:400px;data-size:20");

			paramEntity.setObject("profileHtmlString", profileHtmlString);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDocumentOutstandingList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		DataSet dsDoc;

		try {
			hrDocumentDao.setDataSourceName(dataSource);

			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dsDoc = hrDocumentDao.getPersonOutstandingDocumentByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dsDoc);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDocumentReceived(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDocumentReceivedList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		DataSet dsDoc;

		try {
			hrDocumentDao.setDataSourceName(dataSource);

			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dsDoc = hrDocumentDao.getPersonReceivedDocumentByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dsDoc);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getAdditionalService(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getAdditionalServiceList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		DataSet dataSet;

		try {
			hpAdditionalServicesDao.setDataSourceName(dataSource);

			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dataSet = hpAdditionalServicesDao.getAdditionalServiceByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getCommunication(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getCommunicationList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpContactHistoryDao.setDataSourceName(dataSource);

			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dataSet = hpContactHistoryDao.getContactHistoryForCommunicationListByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getNextActions(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getNextActionsList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpNextActionsDao.setDataSourceName(dataSource);

			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dataSet = hpNextActionsDao.getNextActionsForNextActionsListByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getGeneral(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getGeneralInfo(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet ecmsGeneralInfo;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);

			ecmsGeneralInfo = hpPersonDDao.getEcmsGeneralInfoByPersonId(queryAdvisor, personId);

			ecmsGeneralInfo.setValue("EMPLOYMENT_COMPANY_NAME", CommonUtil.nvl(ecmsGeneralInfo.getValue("EMPLOYMENT_COMPANY_NAME"))+" ("+CommonUtil.nvl(ecmsGeneralInfo.getValue("EMPLOYMENT_COMPANY_ID"))+")");
			ecmsGeneralInfo.setValue("CRM_NAME", CommonUtil.nvl(ecmsGeneralInfo.getValue("CRM_NAME"))+" ("+CommonUtil.nvl(ecmsGeneralInfo.getValue("CRM_ID"))+")");
			ecmsGeneralInfo.setValue("CSM_NAME", CommonUtil.nvl(ecmsGeneralInfo.getValue("CSM_NAME"))+" ("+CommonUtil.nvl(ecmsGeneralInfo.getValue("CSM_ID"))+")");
			ecmsGeneralInfo.setValue("CSA_NAME", CommonUtil.nvl(ecmsGeneralInfo.getValue("CSA_NAME"))+" ("+CommonUtil.nvl(ecmsGeneralInfo.getValue("CSA_ID"))+")");

			paramEntity.setAjaxResponseDataSet(ecmsGeneralInfo);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getWorkingRightsStatusList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			workingRightsStatusDao.setDataSourceName(dataSource);

			dataSet = workingRightsStatusDao.getWorkingRightsStatusListByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getScheduledPayrollNotiList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			scheduledPayrollNotesDao.setDataSourceName(dataSource);

			dataSet = scheduledPayrollNotesDao.getScheduledPayrollNotiListByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getOpportunity(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getOpportunityList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			opportunityDao.setDataSourceName(dataSource);

			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dataSet = opportunityDao.getOpportunityListByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getEditOpportunity(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String opportunityId = dsRequest.getValue("opportunityId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		DataSet dsPerson, dsOpp, dsAsg;
		String profileHtmlString = "";

		try {
			documentProfileDao.setDataSourceName(dataSource);
			opportunityDao.setDataSourceName(dataSource);
			oppAsgDetailsDao.setDataSourceName(dataSource);
			hpPersonDDao.setDataSourceName(dataSource);

			profileHtmlString = documentProfileDao.getProfileHtmlStringForSelectbox("id:documentProfile;name:documentProfile;class:bootstrapSelect hor;data-width:400px;data-size:15");
			dsOpp = opportunityDao.getOpportunityDataSetByOpportunityId(opportunityId);
			dsAsg = oppAsgDetailsDao.getOppAsgDetailsDataSetByOpportunityId(opportunityId);
			dsPerson = hpPersonDDao.getPersonDataSetByPersonId(dsOpp.getValue("PERSON_ID"));

			setWorkcoverValues(paramEntity, session, dsAsg.getValue("END_USER_ORG"), dsAsg.getValue("WC_ORG_CODE_RATE_LINK_ID"), dsAsg);

			paramEntity.setObject("profileHtmlString", profileHtmlString);
			paramEntity.setObject("dsOpp", dsOpp);
			paramEntity.setObject("dsAsg", dsAsg);
			paramEntity.setObject("dsPerson", dsPerson);

			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getOpportunityDetail(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String opportunityId = dsRequest.getValue("opportunityId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		DataSet dsOpp, dsAsg;

		try {
			opportunityDao.setDataSourceName(dataSource);
			oppAsgDetailsDao.setDataSourceName(dataSource);

			dsOpp = opportunityDao.getOpportunityDataSetByOpportunityId(opportunityId);
			dsAsg = oppAsgDetailsDao.getOppAsgDetailsDataSetByOpportunityId(opportunityId);

			paramEntity.setObject("dsOpp", dsOpp);
			paramEntity.setObject("dsAsg", dsAsg);

			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getOpportunityDocuments(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String opportunityId = dsRequest.getValue("opportunityId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			opportunityDao.setDataSourceName(dataSource);

			dataSet = opportunityDao.getOpportunityDocumentDataSetByOpportunityId(opportunityId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getAssignmentList(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getAssignmentDataList(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String personId = dsReq.getValue("personId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(dsReq.getValue("personId"), "person_id = '"+personId+"'");
			qa.addOrderByClause("person_name, assignment_id desc");
			qa.setPagination(true);

			paramEntity.setAjaxResponseDataSet(assignmentBS.getAssignmentList(qa));
			paramEntity.setTotalResultRows(qa.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getAssignment(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		String assignmentId = dsRequest.getValue("assignmentId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		DataSet dsPerson, dsAsg, dsPrt, dsNotiOrg, timesheetApprovers, expenseApprovers, deliverableApprovers;
		String billingOrgId = "", euOrgId = "";

		try {
			qa.setObject("dataSource", dataSource);

			hpPersonDDao.setDataSourceName(dataSource);

			dsPerson = hpPersonDDao.getPersonDataSetByPersonId(personId);
			dsAsg = assignmentBS.getAssignmentAsDataSetByAssignmentId(qa, assignmentId);

			setWorkcoverValues(paramEntity, session, dsAsg.getValue("EU_ORGANISATION_ID"), dsAsg.getValue("WC_ORG_CODE_RATE_LINK_ID"), dsAsg);
			setManagementFeeAndPayrollTax(paramEntity, session, assignmentId, dsAsg);

			dsPrt = assignmentBS.getPayrollTaxDataSetByAssignmentId(qa, assignmentId);
			dsNotiOrg = assignmentBS.getNotiToOrganisations(qa, assignmentId);

			billingOrgId = dsAsg.getValue("BILLING_ORGANISATION_ID");
			euOrgId = dsAsg.getValue("EU_ORGANISATION_ID");

			timesheetApprovers = hpPersonDDao.getApproverDataSetByOrgIds(billingOrgId, euOrgId);
			expenseApprovers = hpPersonDDao.getApproverDataSetByOrgIds(billingOrgId, euOrgId);
			deliverableApprovers = hpPersonDDao.getApproverDataSetByOrgIds(billingOrgId, euOrgId);

			paramEntity.setObject("dsPerson", dsPerson);
			paramEntity.setObject("dsAsg", dsAsg);
			paramEntity.setObject("dsPrt", dsPrt);
			paramEntity.setObject("dsNotiOrg", dsNotiOrg);
			paramEntity.setObject("timesheetApprovers", timesheetApprovers);
			paramEntity.setObject("expenseApprovers", expenseApprovers);
			paramEntity.setObject("deliverableApprovers", deliverableApprovers);

			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPrtDocumentList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String prtDocumentId = dsRequest.getValue("prtDocumentId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hrDocumentDao.setDataSourceName(dataSource);

			dataSet = hrDocumentDao.getDataSetByDocumentId(prtDocumentId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getAssignmentRateList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String assignmentId = dsRequest.getValue("assignmentId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			queryAdvisor.setObject("dataSource", dataSource);

			dataSet = assignmentBS.getAssignmentRatesDataSetByAssignmentId(queryAdvisor, assignmentId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getDeliverableRateList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String assignmentId = dsRequest.getValue("assignmentId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			queryAdvisor.setObject("dataSource", dataSource);

			dataSet = assignmentBS.getDeliverableRatesDataSetByAssignmentId(queryAdvisor, assignmentId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getApproverEmail(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String approverId = dsRequest.getValue("approverId");
		DataSet dataSet = new DataSet();
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpAddressContactDDao.setDataSourceName(dataSource);

			dataSet.addColumn("EMAIL", hpAddressContactDDao.getPreferredEmailByPersonId(approverId));

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getNotiToPersonList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String organisationId = dsRequest.getValue("organisationId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			hpPersonDDao.setDataSourceName(dataSource);

			dataSet = hpPersonDDao.getApproverDataSetByOrgIds(organisationId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPayslips(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getPayslipList(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String personId = dsRequest.getValue("personId");
		DataSet dataSet;
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			queryAdvisor.setObject("dataSource", dataSource);
			queryAdvisor.setPagination(true);
			queryAdvisor.setRequestDataSet(dsRequest);

			dataSet = paymentBS.getPayslipListByPersonId(queryAdvisor, personId);

			paramEntity.setAjaxResponseDataSet(dataSet);
			paramEntity.setTotalResultRows(queryAdvisor.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getSuperannuation(ParamEntity paramEntity) throws Exception {
		DataSet dsRequest = paramEntity.getRequestDataSet();
		String personId = dsRequest.getValue("personId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		HpPersonD hpPersonD;

		try {
			hpPersonDDao.setDataSourceName(dataSource);

			hpPersonD = hpPersonDDao.getPersonByPersonId(personId);

			paramEntity.setObject("hpPersonD", hpPersonD);
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	/**
	 * Private
	 */
	private void setWorkcoverValues(ParamEntity paramEntity, HttpSession session, String endUserOrgId, String wcOrgCodeRateLinkId, DataSet dsAsg) throws Exception {
		QueryAdvisor queryAdvisor = paramEntity.getQueryAdvisor();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		String wcCodeRateName = "", wcWicAnzic = "", wcPercentage = "", wcStartDate = "", wcEndDate = "", wcWorkingStateMeaning = "";

		if (CommonUtil.isValidId(endUserOrgId) && CommonUtil.isValidId(wcOrgCodeRateLinkId)) {
			queryAdvisor.setObject("dataSource", dataSource);
			queryAdvisor.setObject("organisationId", endUserOrgId);
			queryAdvisor.setObject("wcOrgCodeRateLinkId", wcOrgCodeRateLinkId);

			wcCodeRateName = wcBS.getWcCodeRateName(queryAdvisor);
			wcWicAnzic = wcBS.getWcWicAnzic(queryAdvisor);
			wcPercentage = CommonUtil.toStringWithNoFormat(wcBS.getWcPercentage(queryAdvisor));
			wcStartDate = wcBS.getWcStartDate(queryAdvisor);
			wcEndDate = wcBS.getWcEndDate(queryAdvisor);
			wcWorkingStateMeaning = wcBS.getWorkingStateMeaning(queryAdvisor);

			dsAsg.addColumn("WC_CODE_RATE_NAME", wcCodeRateName);
			dsAsg.addColumn("WC_WIC_ANZIC", wcWicAnzic);
			dsAsg.addColumn("WC_PERCENTAGE", wcPercentage);
			dsAsg.addColumn("WC_START_DATE", wcStartDate);
			dsAsg.addColumn("WC_END_DATE", wcEndDate);
			dsAsg.addColumn("WC_WORKING_STATE_MEANING", wcWorkingStateMeaning);
		} else {
			dsAsg.addColumn("WC_CODE_RATE_NAME", "");
			dsAsg.addColumn("WC_WIC_ANZIC", "");
			dsAsg.addColumn("WC_PERCENTAGE", "");
			dsAsg.addColumn("WC_START_DATE", "");
			dsAsg.addColumn("WC_END_DATE", "");
			dsAsg.addColumn("WC_WORKING_STATE_MEANING", "");
		}
	}

	private void setManagementFeeAndPayrollTax(ParamEntity paramEntity, HttpSession session, String assignmentId, DataSet dsAsg) throws Exception {
		QueryAdvisor queryAdvisor = new QueryAdvisor();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		String managementFee, payrollTax;

		queryAdvisor.setObject("dataSource", dataSource);

		managementFee = assignmentBS.getManagementFeeByAssignmentId(queryAdvisor, assignmentId);
		payrollTax = assignmentBS.getPayrollTaxByAssignmentId(queryAdvisor, assignmentId);

		dsAsg.addColumn("MANAGEMENT_FEE", managementFee);
		dsAsg.addColumn("PAYROLL_TAX", payrollTax);
	}
}