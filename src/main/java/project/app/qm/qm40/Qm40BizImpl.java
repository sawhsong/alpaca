/**************************************************************************************************
 * project
 * Description - Qm40 - Find Assignment
 *	- Generated by Source Generator
 *************************************************************************************************/
package project.app.qm.qm40;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import project.common.extend.BaseBiz;
import project.common.module.bizservice.assignment.AssignmentBizService;
import project.conf.resource.ormapper.dao.HpAssignmentsD.HpAssignmentsDDao;
import project.conf.resource.ormapper.dto.oracle.HpAssignmentsD;
import zebra.data.DataSet;
import zebra.data.ParamEntity;
import zebra.data.QueryAdvisor;
import zebra.exception.FrameworkException;
import zebra.util.CommonUtil;
import zebra.util.ConfigUtil;

public class Qm40BizImpl extends BaseBiz implements Qm40Biz {
	@Autowired
	private AssignmentBizService assignmentBS;
	@Autowired
	private HpAssignmentsDDao hpAssignmentsDDao;

	public ParamEntity getDefault(ParamEntity paramEntity) throws Exception {
		try {
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity getList(ParamEntity paramEntity) throws Exception {
		DataSet dsReq = paramEntity.getRequestDataSet();
		QueryAdvisor qa = paramEntity.getQueryAdvisor();
		String asgId = dsReq.getValue("asgId");
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));

		try {
			qa.setObject("dataSource", dataSource);
			qa.addVariable("dateFormat", ConfigUtil.getProperty("format.date.java"));
			qa.addAutoFillCriteria(asgId, "assignment_id "+CommonUtil.getSearchCriteriaWhereClauseString(asgId));
			qa.addAutoFillCriteria(dsReq.getValue("personId"), "person_id = '"+dsReq.getValue("personId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("billingCodeId"), "billing_code_id = '"+dsReq.getValue("billingCodeId")+"'");
			qa.addAutoFillCriteria(dsReq.getValue("billingOrgId"), "billing_organisation_id = '"+dsReq.getValue("billingOrgId")+"'");
			qa.addOrderByClause("person_name, assignment_id desc");
			qa.setPagination(true);

			paramEntity.setAjaxResponseDataSet(assignmentBS.getAssignmentList(qa));
			paramEntity.setTotalResultRows(qa.getTotalResultRows());
			paramEntity.setSuccess(true);
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}

	public ParamEntity exeSave(ParamEntity paramEntity) throws Exception {
		DataSet requestDataSet = paramEntity.getRequestDataSet();
		HttpSession session = paramEntity.getSession();
		String dataSource = CommonUtil.nvl((String)session.getAttribute("DatabaseQuickSearch"), ConfigUtil.getProperty("jdbc.user.name"));
		String assignmentId = requestDataSet.getValue("assignmentId");
		HpAssignmentsD hpAssignmentsD = new HpAssignmentsD();

		try {
			hpAssignmentsDDao.setDataSourceName(dataSource);

			hpAssignmentsD = hpAssignmentsDDao.getByAssignmentId(assignmentId);

			paramEntity.setObject("hpAssignmentsD", hpAssignmentsD);
			paramEntity.setAjaxResponseDataSet(hpAssignmentsD.getDataSet());
			paramEntity.setSuccess(true);
			paramEntity.setMessage("I801", getMessage("I801", paramEntity));
		} catch (Exception ex) {
			throw new FrameworkException(paramEntity, ex);
		}
		return paramEntity;
	}
}